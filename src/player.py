class Player(): 
    """---MAY 4th HEAVY WIP. UNTESTED---"""
    
    """Represents the player of a grid based game. """

    def __init__(self, pos_x, pos_y, rows, cols, path):
        """Constructor: Creates player with supplied values. """

        self.rows = rows
        self.cols = cols

        self.pos_x = pos_x
        self.pos_y = pos_y

        self.move_counter = 0
        self.next_valid = False
        self.mistakes_counter = 0

        self.path = path

    def move(self, direction):
        """Moves the player in some direction. Called by event handler."""

        if direction == "up":
            if self.pos_y > 0:
                self.is_valid(-1, 0)
                if self.next_valid == True:
                    self.pos_y -= 1
                    self.move_counter += 1
            else:
                print("Player at top, cannot move up")

        elif direction == "down":
            if self.pos_y < self.cols:
                self.is_valid(1, 0)
                if self.next_valid == True:
                    self.pos_y += 1
                    self.move_counter += 1
            else:
                print("Player at bottom, cannot move down")

        elif direction == "left":
            if self.pos_x > 0:
                self.is_valid(0, -1)
                if self.next_valid == True:
                    self.pos_x -= 1
                    self.move_counter += 1
            else:
                print("Player at left edge, cannot move left")

        elif direction == "right":
            if self.pos_x < self.rows:
                self.is_valid(0, 1)
                if self.next_valid == True:
                    self.pos_x += 1
                    self.move_counter += 1
            else:
                print("Player at right edge, cannot move right")

        else:
            print("Invalid Move Command. Try again.")

    def is_valid(self, y_dif, x_dif):
        """Checks if a move is valid by matching it to the path generated by the grid"""

        """
        ---DEBUG PRINTS---
        print("Current space in path:")
        print(self.path[self.move_counter + 0])

        print("Next space in path:")
        print(self.path[self.move_counter + 1])

        print("Player moving to:")
        print(str("(" + str(self.pos_y + y_dif) + ", " + str(self.pos_x + x_dif) + ")"))
        """

        #There must be a better way. 
        #Compares grid coordinates.
        #This compares the string output by the tuple to the string produced by the movement.
        #If they match, allow the move. 
        if str("(" + str(self.pos_y + y_dif) + ", " + str(self.pos_x + x_dif) + ")") == str(self.path[self.move_counter + 1]):
            self.next_valid = True
        else:
            self.next_valid = False
            self.mistakes_counter += 1

        print("Move is Correct: " + str(self.next_valid))